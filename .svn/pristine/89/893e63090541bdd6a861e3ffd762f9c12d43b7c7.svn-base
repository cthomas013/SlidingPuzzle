package edu.wm.cs.cs301.slidingpuzzle;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

public class SimplePuzzleState implements PuzzleState {
	
	// set up the fields for the sliding puzzle
	private int[][] board;
	private PuzzleState parent;
	private int pathLength;
	private Operation op;
	private int emptySlots;
	
	public SimplePuzzleState(int[][] board) {
		this.board = board;
		this.parent = null;
		this.pathLength = 0;
		this.op = null;
		this.emptySlots = 0;
	}
	
	public SimplePuzzleState() {
		
		this.board = null;
		this.parent = null;
		this.pathLength = 0;
		this.op = null;
		this.emptySlots = 0;
	}
	
	/** 
	 * this method will set up the start if the puzzle's board
	 * use the dimension and the number of empty slots given by the user to set the board up
	 * to his or her liking
	 **/
	@Override
	public void setToInitialState(int dimension, int numberOfEmptySlots) {
		this.emptySlots = numberOfEmptySlots;
		int count = 1;
		this.board = new int[dimension][dimension];
		for (int i=0; i < dimension; i++) {
			for (int j=0; j < dimension; j++) {
				this.board[i][j] = count;
				count++;
			}
		}
		int cnt = 1;
		while (cnt <= numberOfEmptySlots) {
			this.board[dimension-1][dimension-cnt] = 0;
			cnt++;
		}
	}

	@Override
	public int getValue(int row, int column) {
		return this.board[row][column];
	}

	@Override
	public PuzzleState getParent() {
		return this.parent;
	}

	@Override
	public Operation getOperation() {
		return this.op;
	}

	@Override
	public int getPathLength() {
		return this.pathLength;
	}

	@Override
	public PuzzleState move(int row, int column, Operation op) {
		
		SimplePuzzleState newBoard = new SimplePuzzleState();
		newBoard.board = new int[board.length][board.length];
		for (int i=0; i < board.length; i++) {
			for (int j=0; j < board.length; j++) {
				newBoard.board[i][j] = this.board[i][j];
			}
		}
				
		 switch (op) {
			case MOVERIGHT:
				
				if (isEmpty(row, column+1) == true) {
					newBoard.parent = this;
					newBoard.op = Operation.MOVERIGHT;
					int temp1 = newBoard.board[row][column];
					newBoard.board[row][column] = 0;
					newBoard.board[row][column+1] = temp1;
					newBoard.pathLength = this.pathLength + 1;
					return newBoard;
				}
			case MOVELEFT:
				
				if (isEmpty(row, column-1) == true) {
					newBoard.parent = this;
					newBoard.op = Operation.MOVELEFT;
					int temp2 = newBoard.board[row][column];
					newBoard.board[row][column] = 0;
					newBoard.board[row][column-1] = temp2;
					newBoard.pathLength = this.pathLength + 1;
					return newBoard;
				}
			case MOVEUP:
				
				if (isEmpty(row-1, column) == true) {
					newBoard.parent = this;
					newBoard.op = Operation.MOVEUP;
					int temp3 = newBoard.board[row][column];
					newBoard.board[row][column] = 0;
					newBoard.board[row-1][column] = temp3;
					newBoard.pathLength = this.pathLength + 1;
					return newBoard;
				}
			case MOVEDOWN:
				
				if (isEmpty(row+1, column) == true) {
					newBoard.parent = this;
					newBoard.op = Operation.MOVEDOWN;
					int temp4 = newBoard.board[row][column];
					newBoard.board[row][column] = 0;
					newBoard.board[row+1][column] = temp4;
					newBoard.pathLength = this.pathLength + 1;
					return newBoard;
				}
		}
		return null;
	}

	@Override
	public PuzzleState flip(int startRow, int startColumn, int endRow, int endColumn) {
		
		PuzzleState newBoard = null;
		
		// make sure the current tile is not empty and the end tile is empty
		if ((isEmpty(startRow, startColumn) == false) && (isEmpty(endRow, endColumn) == true)) {
			if ((endRow == startRow - 1) && (endColumn == startColumn)) {
				newBoard = this.move(startRow, startColumn, Operation.MOVEUP);
				return newBoard;
			}
			else if ((endRow == startRow + 1) && (endColumn == startColumn)) {
				newBoard = this.move(startRow, startColumn, Operation.MOVEDOWN);
				return newBoard;
			}
			else if ((endColumn == startColumn + 1) && (endRow == startRow)) {
				newBoard = this.move(startRow, startColumn, Operation.MOVERIGHT);
				return newBoard;
			}
			else if ((endColumn == startColumn - 1) && (endRow == startRow)) {
				newBoard = this.move(startRow, startColumn, Operation.MOVELEFT);
				return newBoard;
			}
			else {
				int currRow = startRow;
				int currColumn = startColumn;
				
				int count = 0;
				
				// use a while loop to know when to terminate the movement
				while ((currRow != endRow) || (currColumn != endColumn)) {
					if (count == 0) {
						if (endColumn > currColumn) {
							if (isEmpty(currRow, currColumn+1) == true) {
								newBoard = this.move(currRow, currColumn, Operation.MOVERIGHT);
								currColumn++;
							}
							else if (isEmpty(currRow+1, currColumn) == true) {
								newBoard = this.move(currRow, currColumn, Operation.MOVEDOWN);
								currRow++;
							}
							else if (isEmpty(currRow-1, currColumn) == true) {
								newBoard = this.move(currRow, currColumn, Operation.MOVEUP);
								currRow--;
							}
						}
						else if (endColumn < currColumn) {
							if (isEmpty(currRow, currColumn-1) == true) {
								newBoard = this.move(currRow, currColumn, Operation.MOVELEFT);
								currColumn--;
							}
							else if (isEmpty(currRow+1, currColumn) == true) {
								newBoard = this.move(currRow, currColumn, Operation.MOVEDOWN);
								currRow++;
							}
							else if (isEmpty(currRow-1, currColumn) == true) {
								newBoard = this.move(currRow, currColumn, Operation.MOVEUP);
								currRow--;
							}
						}
						else if (endRow > currRow) {
							if (isEmpty(currRow+1, currColumn) == true) {
								newBoard = this.move(currRow, currColumn, Operation.MOVEDOWN);
								currRow++;
							}
							else if (isEmpty(currRow, currColumn+1) == true) {
								newBoard = this.move(currRow, currColumn, Operation.MOVERIGHT);
								currColumn++;
							}
							else if (isEmpty(currRow, currColumn-1) == true) {
								newBoard = this.move(currRow, currColumn, Operation.MOVELEFT);
								currColumn--;
							}
						}
						else if (endRow < currRow) {
							if (isEmpty(currRow-1, currColumn) == true) {
								newBoard = this.move(currRow, currColumn, Operation.MOVEUP);
								currRow--;
							}
							else if (isEmpty(currRow, currColumn+1) == true) {
								newBoard = this.move(currRow, currColumn, Operation.MOVERIGHT);
								currColumn++;
							}
							else if (isEmpty(currRow, currColumn-1) == true) {
								newBoard = this.move(currRow, currColumn, Operation.MOVELEFT);
								currColumn--;
								}
							}
						count++;
					}
					else {
						if (endColumn > currColumn) {
							if (isEmpty(currRow, currColumn+1) == true) {
								newBoard = newBoard.move(currRow, currColumn, Operation.MOVERIGHT);
								currColumn++;
							}
							else if (isEmpty(currRow+1, currColumn) == true) {
								newBoard = newBoard.move(currRow, currColumn, Operation.MOVEDOWN);
								currRow++;
							}
							else if (isEmpty(currRow-1, currColumn) == true) {
								newBoard = newBoard.move(currRow, currColumn, Operation.MOVEUP);
								currRow--;
							}
						}
						else if (endColumn < currColumn) {
							if (isEmpty(currRow, currColumn-1) == true) {
								newBoard = newBoard.move(currRow, currColumn, Operation.MOVELEFT);
								currColumn--;
							}
							else if (isEmpty(currRow+1, currColumn) == true) {
								newBoard = newBoard.move(currRow, currColumn, Operation.MOVEDOWN);
								currRow++;
							}
							else if (isEmpty(currRow-1, currColumn) == true) {
								newBoard = newBoard.move(currRow, currColumn, Operation.MOVEUP);
								currRow--;
							}
						}
						else if (endRow > currRow) {
							if (isEmpty(currRow+1, currColumn) == true) {
								newBoard = newBoard.move(currRow, currColumn, Operation.MOVEDOWN);
								currRow++;
							}
							else if (isEmpty(currRow, currColumn+1) == true) {
								newBoard = newBoard.move(currRow, currColumn, Operation.MOVERIGHT);
								currColumn++;
							}
							else if (isEmpty(currRow, currColumn-1) == true) {
								newBoard = newBoard.move(currRow, currColumn, Operation.MOVELEFT);
								currColumn--;
							}
						}
						else if (endRow < currRow) {
							if (isEmpty(currRow-1, currColumn) == true) {
								newBoard = newBoard.move(currRow, currColumn, Operation.MOVEUP);
								currRow--;
							}
							else if (isEmpty(currRow, currColumn+1) == true) {
								newBoard = newBoard.move(currRow, currColumn, Operation.MOVERIGHT);
								currColumn++;
							}
							else if (isEmpty(currRow, currColumn-1) == true) {
								newBoard = newBoard.move(currRow, currColumn, Operation.MOVELEFT);
								currColumn--;
								}
							}
					}
				}
				
				return newBoard;
				
			}
		}
		else {
			return null;
		}
	}

	@Override
	public PuzzleState shuffleBoard(int pathLength) {
		
		// create a new SimpleStateObject to be returned by the method
		PuzzleState newBoard = null;
		
		// create a random number generator
		Random randNum = new Random();
		
		int count = 0;
		while (count < pathLength) {
			if (count == 0) {
				// iterate through the board to see which are the empty spaces in it and create a 2d array
				// to store the row and column of the empty tiles
				int[][] locations = new int[this.emptySlots][2];
				int cnt = 0;
				for (int i = 0; i < this.board.length; i++) {
					for (int j = 0; j < this.board.length; j++) {
						if (this.isEmpty(i, j) == true) {
							locations[cnt][0] = i;
							locations[cnt][1] = j;
							cnt++;
						}
					}
				}
				// now we should have a 2d array that stores the row and column values of all of the empty tiles on the board
				// need to randomly select a number ranging from 0 to the length of the locations array to randomly choose an empty tile
				int emptyTile = randNum.nextInt(locations.length);
				
				// save the row and column values for the empty tile
				int emptyTileRow = locations[emptyTile][0];
				int emptyTileColumn = locations[emptyTile][1];
				
				//now we need to randomly choose an operation to be done on the tile
				// 0 will represent a move to the right, 1 a move to the left, 2 a move up, and 3 a move down
				int mvmnt = randNum.nextInt(3);
				
				if (mvmnt == 0) {
					if (emptyTileColumn+1 < this.board.length) {
						newBoard = this.move(emptyTileRow, emptyTileColumn+1, Operation.MOVELEFT);
						count ++;
					}
				}
				else if (mvmnt == 1) {
					if (emptyTileColumn-1 >= 0) {
						newBoard = this.move(emptyTileRow, emptyTileColumn-1, Operation.MOVERIGHT);
						count++;
					}
				}
				else if (mvmnt == 2) {
					if (emptyTileRow-1 >= 0) {
						newBoard = this.move(emptyTileRow-1, emptyTileColumn, Operation.MOVEDOWN);
						count++;
					}
				}
				else {
					if(emptyTileRow < this.board.length) {
						newBoard = this.move(emptyTileRow+1, emptyTileColumn, Operation.MOVEUP);
						count++;
					}
				}
			}
			else {
				// iterate through the board to see which are the empty spaces in it and create a 2d array
				// to store the row and column of the empty tiles
				int[][] locations = new int[emptySlots][2];
				int cnt = 0;
				for (int i = 0; i < board.length; i++) {
					for (int j = 0; j < board.length; j++) {
						if (newBoard.isEmpty(i, j) == true) {
							locations[cnt][0] = i;
							locations[cnt][1] = j;
							cnt++;
						}
					}
				}
				// now we should have a 2d array that stores the row and column values of all of the empty tiles on the board
				// need to randomly select a number ranging from 0 to the length of the locations array to randomly choose an empty tile
				int emptyTile = randNum.nextInt(locations.length);
				
				// save the row and column values for the empty tile
				int emptyTileRow = locations[emptyTile][0];
				int emptyTileColumn = locations[emptyTile][1];
				
				//now we need to randomly choose an operation to be done on the tile
				// 0 will represent a move to the right, 1 a move to the left, 2 a move up, and 3 a move down
				int mvmnt = randNum.nextInt(3);
				
				if (mvmnt == 0) {
					if (emptyTileColumn+1 < board.length) {
						newBoard = newBoard.move(emptyTileRow, emptyTileColumn+1, Operation.MOVELEFT);
						count ++;
					}
				}
				else if (mvmnt == 1) {
					if (emptyTileColumn-1 >= 0) {
						newBoard = newBoard.move(emptyTileRow, emptyTileColumn-1, Operation.MOVERIGHT);
						count++;
					}
				}
				else if (mvmnt == 2) {
					if (emptyTileRow-1 >= 0) {
						newBoard = newBoard.move(emptyTileRow-1, emptyTileColumn, Operation.MOVEDOWN);
						count++;
					}
				}
				else {
					if(emptyTileRow < board.length) {
						newBoard = newBoard.move(emptyTileRow+1, emptyTileColumn, Operation.MOVEUP);
						count++;
					}
				}
			}
		}
		return newBoard;
	}

	@Override
	public boolean isEmpty(int row, int column) {
		if ((row < 0) || (row >= this.board.length) || (column < 0) || (column >= this.board.length)) {
			return false;
		}
		else if (this.board[row][column] == 0) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + Arrays.deepHashCode(board);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		SimplePuzzleState other = (SimplePuzzleState) obj;
		if (!Arrays.deepEquals(board, other.board))
			return false;
		return true;
	}

}
