package edu.wm.cs.cs301.slidingpuzzle;

import java.util.ArrayList;
import java.util.Arrays;

public class SimplePuzzleState implements PuzzleState {
	
	// set up the fields for the sliding puzzle
	private int[][] board;
	private PuzzleState parent;
	private int pathLength;
	private Operation op;
	
	public SimplePuzzleState(int[][] board) {
		this.board = board;
		this.parent = null;
		this.pathLength = 0;
		this.op = null;
	}
	
	public SimplePuzzleState() {
		
		this.board = null;
		this.parent = null;
		this.pathLength = 0;
		this.op = null;
	}
	
	/** 
	 * this method will set up the start if the puzzle's board
	 * use the dimension and the number of empty slots given by the user to set the board up
	 * to his or her liking
	 **/
	@Override
	public void setToInitialState(int dimension, int numberOfEmptySlots) {
		int count = 1;
		this.board = new int[dimension][dimension];
		for (int i=0; i < dimension; i++) {
			for (int j=0; j < dimension; j++) {
				this.board[i][j] = count;
				count++;
			}
		}
		int cnt = 1;
		while (cnt <= numberOfEmptySlots) {
			this.board[dimension-1][dimension-cnt] = 0;
			cnt++;
		}
		this.parent = new SimplePuzzleState(this.board);
	}

	@Override
	public int getValue(int row, int column) {
		return this.board[row][column];
	}

	@Override
	public PuzzleState getParent() {
		return this.parent;
	}

	@Override
	public Operation getOperation() {
		return this.op;
	}

	@Override
	public int getPathLength() {
		return this.pathLength;
	}

	@Override
	public PuzzleState move(int row, int column, Operation op) {
		
		SimplePuzzleState newBoard = new SimplePuzzleState();
		newBoard.board = new int[board.length][board.length];
		for (int i=0; i < board.length; i++) {
			for (int j=0; j < board.length; j++) {
				newBoard.board[i][j] = this.board[i][j];
			}
		}
				
		 switch (op) {
			case MOVERIGHT:
				this.parent = newBoard;
				this.op = Operation.MOVERIGHT;
				if (isEmpty(row, column+1) == true) {
					int temp1 = newBoard.board[row][column];
					newBoard.board[row][column] = 0;
					newBoard.board[row][column+1] = temp1;
					this.pathLength++;
					return newBoard;
				}
			case MOVELEFT:
				this.parent = newBoard;
				this.op = Operation.MOVELEFT;
				if (isEmpty(row, column-1) == true) {
					int temp2 = newBoard.board[row][column];
					newBoard.board[row][column] = 0;
					newBoard.board[row][column-1] = temp2;
					this.pathLength++;
					return newBoard;
				}
			case MOVEUP:
				this.parent = newBoard;
				this.op = Operation.MOVEUP;
				if (isEmpty(row-1, column) == true) {
					int temp3 = newBoard.board[row][column];
					newBoard.board[row][column] = 0;
					newBoard.board[row-1][column] = temp3;
					this.pathLength++;
					return newBoard;
				}
			case MOVEDOWN:
				this.parent = newBoard;
				this.op = Operation.MOVEDOWN;
				if (isEmpty(row+1, column) == true) {
					int temp4 = newBoard.board[row][column];
					newBoard.board[row][column] = 0;
					newBoard.board[row+1][column] = temp4;
					this.pathLength++;
					return newBoard;
				}
		}
		return null;
	}

	@Override
	public PuzzleState flip(int startRow, int startColumn, int endRow, int endColumn) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public PuzzleState shuffleBoard(int pathLength) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean isEmpty(int row, int column) {
		if ((row < 0) || (row >= this.board.length) || (column < 0) || (column >= this.board.length)) {
			return false;
		}
		else if (this.board[row][column] == 0) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + Arrays.deepHashCode(board);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		SimplePuzzleState other = (SimplePuzzleState) obj;
		if (!Arrays.deepEquals(board, other.board))
			return false;
		return true;
	}

}
